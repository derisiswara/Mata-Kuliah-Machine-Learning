{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Mata Kuliah: Machine Learning\"\n",
        "subtitle: \"Tree-Based Algorithms\"\n",
        "format:\n",
        "  revealjs: \n",
        "    slide-number: true\n",
        "    chalkboard: \n",
        "      buttons: false\n",
        "    preview-links: auto\n",
        "    logo: img/Logo-Horizontal.png\n",
        "    css: styles.css\n",
        "    footer: '[@2025 - Deri Siswara](https://derisiswara.quarto.pub/ml_w5)'\n",
        "---\n",
        "\n",
        "\n",
        "## Pendahuluan {.smaller}\n",
        "\n",
        "Dalam pembelajaran mesin, algoritma yang berbasis pohon disebut algoritma berbasis pohon. Algoritma ini menggunakan struktur seperti pohon untuk membuat keputusan atau prediksi. Beberapa algoritma berbasis pohon yang paling umum adalah:\n",
        "\n",
        "- **Decision Tree**: Struktur pohon sederhana di mana setiap node internal mewakili keputusan berdasarkan fitur, dan setiap node daun mewakili hasil (klasifikasi atau regresi).\n",
        "\n",
        "- **Random Forest**: Metode ensemble yang membuat kumpulan pohon keputusan dan menggabungkan hasilnya (biasanya dengan rata-rata atau pemungutan suara mayoritas) untuk meningkatkan akurasi dan mengurangi overfitting.\n",
        "\n",
        "- **Gradient Boosting Machines (GBM)**: Algoritma boosting yang membangun pohon secara berurutan, di mana setiap pohon mencoba memperbaiki kesalahan yang dibuat oleh pohon sebelumnya. Implementasi populer termasuk XGBoost, LightGBM, dan CatBoost.\n",
        "\n",
        "Algoritma ini banyak digunakan karena kemampuannya untuk menangani tugas klasifikasi dan regresi secara efektif serta interpretabilitasnya.\n",
        "\n",
        "## Decision Tree {.smaller}\n",
        "\n",
        "\n",
        "\n",
        "## Pendahuluan {.smaller}\n",
        "\n",
        "Hubungan antara upah dan pengalaman kerja dapat dijelaskan dengan fungsi regresi tak linier. Semakin lama pengalaman kerja, upah yang diterima akan meningkat, namun maksimumnya akan tercapai. Setelah mencapai titik maksimum, upah akan tetap konstan atau bahkan menurun seiring bertambahnya pengalaman kerja.\n"
      ],
      "id": "d541e056"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Atur besar plot\n",
        "plt.rcParams['figure.figsize'] = [10, 5]\n",
        "# Plot log(wage) terhadap experience\n",
        "plt.scatter(df1['experience'], np.log(df1['wage']), label='Data', color='black', s=20)\n",
        "plt.xlabel('Pengalaman Kerja (Tahun)')\n",
        "plt.ylabel('Dolar per Minggu (Ln)')\n",
        "plt.title('Hubungan Upah dan Pengalaman Kerja')\n",
        "\n",
        "# Garis regresi pertama\n",
        "experience_range = np.linspace(df1['experience'].min(), df1['experience'].max(), 100)\n",
        "plt.plot(experience_range, 5 + 0.01 * experience_range, color='blue', linestyle='--', label='Garis Regresi: a = 5, b = 0.01')\n",
        "\n",
        "# Garis regresi kedua dengan fungsi LinearRegression atau OLS\n",
        "model = LinearRegression()\n",
        "X = df1[['experience']]\n",
        "y = np.log(df1['wage'])\n",
        "model.fit(X, y)\n",
        "y_pred = model.predict(X)\n",
        "plt.plot(df1['experience'], y_pred, color='red', label='Garis Regresi: OLS')\n",
        "\n",
        "# Add quadratic function to the plot\n",
        "quadratic_model = LinearRegression()\n",
        "X_quad = np.column_stack((df1['experience'], df1['experience']**2))\n",
        "quadratic_model.fit(X_quad, np.log(df1['wage']))\n",
        "order_id = np.argsort(df1['experience'])\n",
        "plt.plot(df1['experience'][order_id], quadratic_model.predict(X_quad)[order_id], color='green', linewidth=2, label='Regresi Tak Linear: Kuadratik')\n",
        "\n",
        "# Tambahkan label untuk kedua garis\n",
        "plt.legend(loc='lower right')\n",
        "plt.show()"
      ],
      "id": "e26b4b96",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Startegi Menghadapi Pola Tak Linear {.smaller}\n",
        "\n",
        "- Transformasi Variabel: Mengubah variabel input atau output dengan fungsi matematika tertentu, dengan harapan data hasil transformasi memiliki pola linier.\n",
        "- Melakukan pemodelan per cluster atau segmentasi data.\n",
        "- Menggunakan fungsi regresi tak linier. Misalnya, regresi polinomial, regresi piecewise, regresi spline, regresi generalized additive model (GAM),\n",
        "- Menggunakan metode _machine learning_ lain seperti _random forest_, _support vector machine_, _neural network_, _deep learning_, dan lain-lain.\n",
        "- Pemulusan (_smoothing_) data.\n",
        "\n",
        "## Transformasi Variabel {.smaller}\n",
        "\n",
        "![](img/trans.png){.absolute}\n",
        "\n",
        "## Regresi Polinomial {.smaller}\n",
        "\n",
        "#### Model:\n",
        "\n",
        "$$\n",
        "Y = \\beta_0 + \\beta_1 X + \\beta_2 X^2 + \\ldots + \\beta_p X^d + \\epsilon\n",
        "$$\n",
        "\n",
        "di mana $d$ adalah derajat polinomial.\n",
        "\n",
        "Derajat polinomial yang sering digunakan adalah derajat 2 (kuadratik) dan derajat 3 (kubik).\n",
        "\n",
        "Derajat polinomial yang tinggi dapat menyebabkan _overfitting_. Kurva berbentuk terlalu liar, terutama pada bagian ujung.\n",
        "\n",
        "![](img/poli.png){.absolute top=\"400\" } \n",
        "\n",
        "## Fungsi Tangga (Piecewise) {.smaller}\n",
        "\n",
        "#### Model:\n",
        "\n",
        "$$\n",
        "Y = \\beta_0 + \\beta_1 I(X \\leq c_1) + \\beta_2 I(c_1 < X \\leq c_2) + \\ldots + \\beta_k I(c_{k-1} < X \\leq c_k) + \\epsilon\n",
        "$$\n",
        "\n",
        "di mana $I$ adalah fungsi indikator.\n",
        "\n",
        "Fungsi tangga membagi data menjadi beberapa segmen dan memodelkan setiap segmen dengan fungsi linier.\n",
        "\n",
        "Setiap segmen memiliki _intercept_ dan _slope_ yang berbeda. \n",
        "\n",
        "![](img/tangga.png){.absolute top=\"400\" } \n",
        "\n",
        "## Regresi Spline {.smaller}\n",
        "\n",
        "Regresi spline adalah metode regresi yang membagi data menjadi beberapa segmen dan memodelkan setiap segmen dengan fungsi polinomial. Regresi ini adalah generalisasi dari regresi polinomial dan regresi tangga.\n",
        "\n",
        "Kelebihan regresi spline adalah fleksibilitas dalam menangkap pola data yang kompleks.\n",
        "\n",
        "![](img/spline.png){.absolute top=\"300\" }\n",
        "\n",
        "## Pemulusan Data (Smoothing) {.smaller}\n",
        "\n",
        "Pemulusan data adalah teknik untuk mengurangi fluktuasi atau noise dalam data sehingga pola utama lebih mudah terlihat. Teknik ini sering digunakan dalam analisis deret waktu. **Metode Pemulusan Data**:\n",
        "\n",
        "- **Moving Average**: Menghitung rata-rata dari sejumlah titik data dalam jendela bergerak.\n",
        "- **Exponential Smoothing**: Memberikan bobot yang lebih besar pada titik data yang lebih baru.\n",
        "- **LOESS (Locally Estimated Scatterplot Smoothing)**: Menggunakan regresi lokal untuk memuluskan data.\n",
        "\n",
        "![](https://bpcdn.co/images/2015/03/27153236/EMA-vs-SMA-780x443.png){.absolute top=\"400\" width=\"400\" height=\"200\" left=\"300\"}\n",
        "\n",
        "# [Code Exercise](http://derisiswara.quarto.pub/week5_ml/) {.smaller}\n",
        "\n",
        "##  Reference {.smaller}\n",
        "\n",
        "- James, G., Witten, D., Hastie, T., & Tibshirani, R. (2013). An Introduction to Statistical Learning: With Applications in R. New York: Springer.\n",
        "- Hastie, T., Tibshirani, R., & Friedman, J. (2009). The Elements of Statistical Learning: Data Mining, Inference, and Prediction (2nd ed.). New York: Springer Science and Business Media."
      ],
      "id": "3c2acadc"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\derik\\anaconda3\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}